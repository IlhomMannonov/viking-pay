import {Markup, Telegraf} from 'telegraf';
import {Request, Response} from 'express';
import {AppDataSource} from "../config/db";
import {User} from "../entity/User";
import {Context} from "node:vm";

const bot = new Telegraf('7463416724:AAFnvtj19qjumIRwuZ5Q_9IeZnnzRLX8NCU');
const userRepository = AppDataSource.getRepository(User);

bot.start(async (ctx) => {
    const user = await getBotUser(ctx.chat.id.toString());
    if (!user.last_name) {
        await ctx.reply(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.',
            Markup.keyboard([
                Markup.button.contactRequest("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            ])
                .resize()
        );
    }else{
        await userHome(ctx)

    }

});


bot.on('contact', async (ctx) => {
    const user = await getBotUser(ctx.chat.id.toString());
    // if (user.state == 'send_phone') {
    user.state = "send_FIO";

    const contact = ctx.message.contact;
    let number = contact.phone_number;
    if (!contact.phone_number.startsWith('+')) {
        number = '+' + contact.phone_number;
    }
    user.phone_number = number;
    await userRepository.save(user);
    await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é", Markup.removeKeyboard());
    // }
});


bot.on("text", async (ctx) => {
    const user = await getBotUser(ctx.chat.id.toString());
    if (user.state === 'send_FIO') {
        const text = ctx.message.text.trim();
        const parts = text.split(' ');

        if (parts.length === 2 && parts[0].length > 3 && parts[1].length > 3) {
            const firstName = parts[0];
            const lastName = parts[1];


            user.first_name = firstName;
            user.last_name = lastName;
            await userRepository.save(user);
            // Tekshiruv muvaffaqiyatli
            await userHome(ctx);
            // Yangi holatga o'tkazish yoki boshqa amallarni bajarish
            await updateUserState(ctx.chat.id.toString(), 'user_home');
        } else {
            // Tekshiruv muvaffaqiyatsiz
            ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é. –û–±–∞ –∏–º–µ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 3 –±—É–∫–≤.');
        }
    }
})
export const userHome = async (ctx: Context) => {
    // const user = await getBotUser(ctx.chat.id.toString());
    // const payme = await paymeRepository.findOne({where: {user_id: user.id}})
    await ctx.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å!\n" +
        "üè¥‚Äç‚ò†Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Viking Pay!\n" +
        "\n" +
        "üíº –ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n" +
        "üîÅ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–∏—Ö —Å–∞–π—Ç–æ–≤\n" +
        "üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å –±—É–∫–º–µ–∫–µ—Ä—Å–∫–∏—Ö —Å–∞–π—Ç–æ–≤ ‚Äî –±—ã—Å—Ç—Ä–æ, –Ω–∞–¥–µ–∂–Ω–æ –∏ —É–¥–æ–±–Ω–æ!\n" +
        "\n" +
        "‚öôÔ∏è –ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º?\n" +
        "1Ô∏è‚É£ –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∑–∞—è–≤–∫—É\n" +
        "2Ô∏è‚É£ –ù–∞—à–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å–≤—è–∑—ã–≤–∞—é—Ç—Å—è —Å –≤–∞–º–∏\n" +
        "3Ô∏è‚É£ –î–µ–Ω—å–≥–∏ –ø–æ–ø–æ–ª–Ω—è—é—Ç—Å—è –∏–ª–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É\n" +
        "\n" +
        "‚úÖ –†–∞–±–æ—Ç–∞–µ–º 24/7\n" +
        "‚úÖ –ù–∞–¥–µ–∂–Ω—ã–µ –∏ –±—ã—Å—Ç—Ä—ã–µ –≤—ã–ø–ª–∞—Ç—ã\n" +
        "‚úÖ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã\n" +
        "\n" +
        "üöÄ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ÄúüÜò –ù–∞—á–∞—Ç—å‚Äù.",
        Markup.inlineKeyboard([
            [Markup.button.webApp("üÜò –ù–∞—á–∞—Ç—å", 'https://viking-pay.netlify.app/')],
        ])
    );

    // await ctx.reply("üëÜ Bu to'lov tizimlari orqali to'lov qilishingiz uchun avval to'lov accountlarinigzni faollashtiring", Markup.removeKeyboard())
};
export const getBotUser = async (chat_id: string): Promise<User> => {
    const findUser = await userRepository.findOne({where: {chat_id}});
    if (!findUser) {
        const newUser = userRepository.create({
            chat_id,
            is_bot_user: true,
            state: 'send_phone'
        });
        // Yaratilgan foydalanuvchini saqlash
        await userRepository.save(newUser);
        return newUser;
    }
    return findUser;
};
export const updateUserState = async (chat_id: string, state: string): Promise<User> => {
    const user = await getBotUser(chat_id);
    user.state = state;
    await userRepository.save(user);
    return user;
};

export const setWebhook = (req: Request, res: Response) => {
    bot.handleUpdate(req.body);
    res.sendStatus(200);
};


// bot.launch();
export const launchBot = () => {
    console.log('Telegram bot started');
};
console.log('Bot is running...');


// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
